<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.itnanls.mapper.DeptMapper">
    <!--开启本Mapper的namespace下的二级缓存-->
    <!--eviction回收策略（缓存满了的淘汰机制），目前MyBatis提供以下策略。
      1. LRU（Least Recently Used）,最近最少使用的，最长时间不用的对象
      2. FIFO（First In First Out）,先进先出，按对象进入缓存的顺序来移除他们-->
    <!--flushInterval:刷新间隔时间，单位为毫秒，
      1. 这里配置的是100秒刷新，如果你不配置它，那么当SQL被执行的时候才会去刷新缓存。
      readOnly:只读，
      1. 意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，
      缺点是我们没有办法修改缓存，他的默认值是false，不允许我们修改-->
    <!--<cache eviction="LRU" flushInterval="100000" readOnly="true"/>-->

    <!--三级缓存 第三方服务商提供的更高级的缓存方案 比如ehcache-->
    <!--<cache type="org.mybatis.caches.ehcache.EhcacheCache" eviction="LRU"
           flushInterval="10000" size="1024" readOnly="true"/>-->

    <resultMap id="deptResult" type="Dept">
        <result property="name" column="name1"/>
    </resultMap>
    <select id="findDeptById" resultMap="deptResult" >
        select id,name name1 from dept where id=#{id}
    </select>


    <!--第一种写法 结果集嵌套-->
   <!--<resultMap id="deptEmpResult" type="Dept">
        <id property="id" column="did"/>
        <result property="name" column="dname"/>
        &lt;!&ndash;这个employees集合包含的是employee类型&ndash;&gt;
        <collection property="employees" ofType="employee">
            <id property="id" column="eid"/>
            <result property="name" column="ename"/>
        </collection>
    </resultMap>-->
    
   <!--<select id="selectAllDepts" resultMap="deptEmpResult">
        select  d.id did,d.name dname,e.id eid,e.name ename
        from dept d
        left  join employee e
        on d.id= e.did
    </select>-->


    <!--第二种写法 查询嵌套-->
    <resultMap id="deptEmpResult" type="Dept">
        <id property="id" column="id"/>
        <!--<result property="name" column="name"/>-->
        <collection property="employees" ofType="employee"
                    column="id" select="cn.itnanls.mapper.EmployeeMapper.getEmpByDid">
            <!--<id property="id" column="id"/>
            <result property="name" column="name"/>-->
        </collection>
    </resultMap>
    <!--flushCache="true" 清除缓存-->
    <!--加了这个flushCache="true" 每次查询都会走数据库-->
    <select id="selectAllDepts" resultMap="deptEmpResult" >
        select id, name from dept
    </select>

</mapper>